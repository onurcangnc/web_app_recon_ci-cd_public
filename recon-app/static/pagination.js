/**
 * pagination.js - Script for paginating <pre> blocks and filtering lines.
 * Designed to work with HTML generated by the Python report script.
 */

function paginatePreTabs(preId, linesPerPage = 10) { // Default to 10 lines
    const preElement = document.getElementById(preId);
    if (!preElement) {
        console.error(`[paginatePreTabs] Element not found: #${preId}`);
        return;
    }
  
    if (preElement.dataset.originalContent === undefined) {
        preElement.dataset.originalContent = preElement.innerHTML;
    }
  
    const originalContent = preElement.dataset.originalContent || '';
    const lines = originalContent.split('\n').filter(line => line.trim() !== '' || line === '');
    let currentPage = 1;
    const totalPages = Math.max(1, Math.ceil(lines.length / linesPerPage));
  
    const dashboardBox = preElement.closest('.dashboard-content-box');
    if (dashboardBox) {
        dashboardBox.style.minHeight = '500px';
        dashboardBox.style.display = 'flex';
        dashboardBox.style.flexDirection = 'column';
        dashboardBox.style.justifyContent = 'space-between';
    }
  
    const existingContainer = document.querySelector(`.pagination-container[data-controls-for="${preId}"]`);
    if (existingContainer) {
        existingContainer.remove();
    }
    const existingNoData = document.querySelector(`.pagination-no-data[data-controls-for="${preId}"]`);
    if (existingNoData) {
        existingNoData.remove();
    }
  
    if (lines.length === 0) {
        const infoDiv = document.createElement('div');
        infoDiv.className = 'pagination-no-data';
        infoDiv.textContent = 'No data found.';
        infoDiv.dataset.controlsFor = preId;
        preElement.parentNode.insertBefore(infoDiv, preElement.nextSibling);
        preElement.style.display = 'none';
        return;
    }
  
    preElement.style.display = '';
  
    const existingSearch = document.getElementById(`searchInput-${preId}`);
    if (!existingSearch) {
      const searchDiv = document.createElement('div');
      searchDiv.className = 'search-container';
      searchDiv.style.textAlign = 'center';
      searchDiv.style.margin = '1rem auto';
      searchDiv.style.maxWidth = '500px';
      searchDiv.innerHTML = `
        <input type="text" id="searchInput-${preId}" oninput="filterLines('${preId}')" placeholder="🔍 Search..." class="search-input" style="width: 100%; padding: 0.5rem; font-size: 1rem;" />
      `;
      preElement.parentNode.insertBefore(searchDiv, preElement);
    }
  
    const container = document.createElement('div');
    container.className = 'pagination-container';
    container.dataset.controlsFor = preId;
  
    const controlsDiv = document.createElement('div');
    controlsDiv.className = 'pagination-controls';
    controlsDiv.style.display = 'flex';
    controlsDiv.style.justifyContent = 'center';
    controlsDiv.style.gap = '1rem';
    controlsDiv.style.marginTop = '1rem';
    controlsDiv.style.flexWrap = 'wrap';
  
    const prevButton = document.createElement('button');
    prevButton.textContent = '<< Previous';
    prevButton.className = 'btn btn-secondary btn-pagination';
  
    const pageInfo = document.createElement('span');
    pageInfo.className = 'pagination-info';
    pageInfo.style.alignSelf = 'center';
  
    const nextButton = document.createElement('button');
    nextButton.textContent = 'Next >>';
    nextButton.className = 'btn btn-secondary btn-pagination';
  
    const downloadButton = document.createElement('button');
    downloadButton.textContent = '⬇ Download All';
    downloadButton.className = 'btn btn-secondary btn-pagination';
    downloadButton.onclick = () => {
      const blob = new Blob([originalContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${preId}_full_output.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    };
  
    controlsDiv.appendChild(prevButton);
    controlsDiv.appendChild(pageInfo);
    controlsDiv.appendChild(nextButton);
    controlsDiv.appendChild(downloadButton);
    container.appendChild(controlsDiv);
    preElement.parentNode.insertBefore(container, preElement.nextSibling);
  
    function displayPage(page) {
        currentPage = page;
        const start = (currentPage - 1) * linesPerPage;
        const end = start + linesPerPage;
        let pageLines = lines.slice(start, end);
  
        while (pageLines.length < linesPerPage) {
          pageLines.push('');
        }
  
        preElement.innerHTML = pageLines.join('\n');
        pageInfo.textContent = `Page ${currentPage} / ${totalPages}`;
        prevButton.disabled = currentPage === 1;
        nextButton.disabled = currentPage === totalPages;
    }
  
    prevButton.addEventListener('click', () => {
        if (currentPage > 1) {
            displayPage(currentPage - 1);
        }
    });
  
    nextButton.addEventListener('click', () => {
        if (currentPage < totalPages) {
            displayPage(currentPage + 1);
        }
    });
  
    displayPage(1);
  }
  
  function filterLines(blockId) {
    const inputElement = document.getElementById(`searchInput-${blockId}`);
    const preElement = document.getElementById(blockId);
  
    if (!preElement) {
        console.error(`[filterLines] Target pre element not found: #${blockId}`);
        return;
    }
    if (!inputElement) {
        console.error(`[filterLines] Input element not found for: #searchInput-${blockId}`);
        return;
    }
  
    const filterValue = inputElement.value.toLowerCase().trim();
    const originalContent = preElement.dataset.originalContent;
    if (originalContent === undefined) {
        console.warn(`[filterLines] Original content not found in dataset for #${blockId}.`);
        preElement.dataset.originalContent = preElement.innerHTML;
    }
  
    const allLines = (preElement.dataset.originalContent || '').split('\n');
    const filteredLines = filterValue ? allLines.filter(line => line.toLowerCase().includes(filterValue)) : allLines;
    preElement.innerHTML = filteredLines.join('\n');
  }
  