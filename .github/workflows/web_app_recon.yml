name: Passive Reconnaissance DevSecOps Pipeline

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Target Domain (e.g. example.com)'
        required: true
        default: 'bilishim.com'

env:
  DOMAIN: ${{ github.event.inputs.domain }}
  HOST_OUTPUT_DIR: /home/runner/recon-app
  CONTAINER_OUTPUT_DIR: /output

jobs:
  build:
    runs-on: [self-hosted, recon]
    container:
      image: ghcr.io/onurcangnc/kali-pentest:latest
      volumes:
        - /home/runner/recon-app:/output

    steps:
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4
        with:
          path: '.'

      - name: üöø Pre-Cleanup Old TXT Files (Wayback included)
        shell: bash
        run: |
          echo "[*] Cleaning up old TXT files from previous run..."
          rm -f "$CONTAINER_OUTPUT_DIR/data"/*.txt || true
          echo "[*] Old TXT cleanup done."

      - name: ‚úÖ Print Target Domain
        shell: bash
        run: |
          echo "[+] Recon will run for: $DOMAIN"

      - name: üîç Subdomain Discovery | subfinder + assetfinder
        id: subdomains
        shell: bash
        run: |
          mkdir -p findings
          subfinder -d "$DOMAIN" -all -silent -o findings/subfinder.txt
          assetfinder --subs-only "$DOMAIN" > findings/assetfinder.txt
          cat findings/subfinder.txt findings/assetfinder.txt | sort -u > findings/all_subdomains.txt
          echo "[+] Total subdomains found: $(wc -l < findings/all_subdomains.txt)"

      - name: üåê Live Hosts Probe | httpx
        if: hashFiles('findings/all_subdomains.txt') != ''
        shell: bash
        run: |
          httpx -l findings/all_subdomains.txt \
            -ports 80,443,8000,8080,8888 \
            -threads 100 -timeout 5 -retries 1 \
            -follow-redirects -silent \
            -mc 200 \
            -o findings/live_2xx_3xx_urls.txt
          cut -d' ' -f1 findings/live_2xx_3xx_urls.txt | sed 's|https\?://||' | sort -u > findings/live_2xx_3xx_hosts.txt

      - name: üì° DNS Information | dnsx
        shell: bash
        run: |
          dnsx -l findings/all_subdomains.txt -a -cname -txt -mx -resp -silent \
            | sed 's/\x1B\[[0-9;]*[a-zA-Z]//g' > findings/dns_info.txt

      - name: üß† Subdomain Takeover | subzy
        shell: bash
        run: |
          subzy run --targets findings/all_subdomains.txt --concurrency 50 --hide_fails --timeout 10 \
            | sed 's/\x1B\[[0-9;]*[a-zA-Z]//g' > findings/subzy.txt

      - name: üîç Tech Stack Fingerprint | whatweb + optimized wayback
        shell: bash
        run: |
          echo "[+] Running WhatWeb on live URLs..."
          whatweb -i findings/live_2xx_3xx_urls.txt --no-errors --color=never > findings/whatweb.txt
          echo "[+] WhatWeb completed."

          echo "[+] Running WaybackURLs for $DOMAIN..."
          WAYBACK_TEMP=$(mktemp)
          echo "$DOMAIN" | waybackurls > "$WAYBACK_TEMP" 2>/dev/null
          sort -u "$WAYBACK_TEMP" > findings/waybackurls.txt
          echo "[+] Total Wayback URLs: $(wc -l < findings/waybackurls.txt)"
      
      - name: üïµÔ∏è Filter Sensitive Wayback URLs
        shell: bash
        run: |
          echo "[+] Filtering sensitive URLs (endpoints, docs, queries)..."
          grep -Ei '\.(php|aspx|jsp|html|cgi|pl|py|rb|do|action|json|xml|env|txt|conf|log|ini|cfg|bak|old|zip|rar|tar|gz|doc|docx|xls|xlsx|csv|ppt|pptx|pdf|rtf|md|yml|yaml|css|pdf)(\?|$)|\?.*=' \
            findings/waybackurls.txt > findings/waybackurls_filtered.txt || true
          echo "[‚úÖ] Filtered sensitive Wayback URLs: $(wc -l < findings/waybackurls_filtered.txt)"

      - name: üß™ Show Findings
        shell: bash
        run: |
          if [ -d findings ]; then
            echo "[*] Contents of findings/:"
            ls -lh findings
            echo "[*] First few lines from each file:"
            head -n 5 findings/*.txt 2>/dev/null || echo "No .txt files found in findings/"
          else
            echo "[!] findings/ directory not found!"
          fi

      - name: üìù Copy Findings & Generate Report
        shell: bash
        run: |
          mkdir -p "$CONTAINER_OUTPUT_DIR/data"
          cp findings/*.txt "$CONTAINER_OUTPUT_DIR/data/"
          echo "[*] Copied files to $CONTAINER_OUTPUT_DIR/data:"
          ls -lh "$CONTAINER_OUTPUT_DIR/data"
          python3 generate_report.py

      - name: üßπ Cleanup Artifacts
        shell: bash
        run: |
          echo "[*] Cleaning up TXT artifacts except waybackurls..."
          find "$CONTAINER_OUTPUT_DIR/data" -type f -name "*.txt" ! -name "waybackurls.txt" ! -name "waybackurls_filtered.txt" -exec rm -f {} +
          echo "[*] Cleanup complete. Remaining files:"
          ls -lh "$CONTAINER_OUTPUT_DIR/data"
